/* soapStub.h
   Generated by gSOAP 2.7.17 from ./wsdl2h_generate/bz_560_service.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"http://webservice.dot.com/"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns2__getNewBulkGoodsInf
#define SOAP_TYPE_ns2__getNewBulkGoodsInf (8)
/* ns2:getNewBulkGoodsInf */
class SOAP_CMAC ns2__getNewBulkGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns2__getNewBulkGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getNewBulkGoodsInf(): uid(NULL), soap(NULL) { ns2__getNewBulkGoodsInf::soap_default(NULL); }
	virtual ~ns2__getNewBulkGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getNewBulkGoodsInfResponse
#define SOAP_TYPE_ns2__getNewBulkGoodsInfResponse (9)
/* ns2:getNewBulkGoodsInfResponse */
class SOAP_CMAC ns2__getNewBulkGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns2__getNewBulkGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getNewBulkGoodsInfResponse(): soap(NULL) { ns2__getNewBulkGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getNewBulkGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__collectSpecialLine
#define SOAP_TYPE_ns2__collectSpecialLine (10)
/* ns2:collectSpecialLine */
class SOAP_CMAC ns2__collectSpecialLine
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *recordID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns2__collectSpecialLine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__collectSpecialLine(): uid(NULL), recordID(NULL), soap(NULL) { ns2__collectSpecialLine::soap_default(NULL); }
	virtual ~ns2__collectSpecialLine() { }
};
#endif

#ifndef SOAP_TYPE_ns2__collectSpecialLineResponse
#define SOAP_TYPE_ns2__collectSpecialLineResponse (11)
/* ns2:collectSpecialLineResponse */
class SOAP_CMAC ns2__collectSpecialLineResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns2__collectSpecialLineResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__collectSpecialLineResponse(): return_(NULL), soap(NULL) { ns2__collectSpecialLineResponse::soap_default(NULL); }
	virtual ~ns2__collectSpecialLineResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getUserCustomInf
#define SOAP_TYPE_ns2__getUserCustomInf (12)
/* ns2:getUserCustomInf */
class SOAP_CMAC ns2__getUserCustomInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns2__getUserCustomInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getUserCustomInf(): uid(NULL), soap(NULL) { ns2__getUserCustomInf::soap_default(NULL); }
	virtual ~ns2__getUserCustomInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getUserCustomInfResponse
#define SOAP_TYPE_ns2__getUserCustomInfResponse (13)
/* ns2:getUserCustomInfResponse */
class SOAP_CMAC ns2__getUserCustomInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns2__getUserCustomInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getUserCustomInfResponse(): soap(NULL) { ns2__getUserCustomInfResponse::soap_default(NULL); }
	virtual ~ns2__getUserCustomInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getFavoriteSpecialLineInf
#define SOAP_TYPE_ns2__getFavoriteSpecialLineInf (14)
/* ns2:getFavoriteSpecialLineInf */
class SOAP_CMAC ns2__getFavoriteSpecialLineInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns2__getFavoriteSpecialLineInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getFavoriteSpecialLineInf(): uid(NULL), soap(NULL) { ns2__getFavoriteSpecialLineInf::soap_default(NULL); }
	virtual ~ns2__getFavoriteSpecialLineInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getFavoriteSpecialLineInfResponse
#define SOAP_TYPE_ns2__getFavoriteSpecialLineInfResponse (15)
/* ns2:getFavoriteSpecialLineInfResponse */
class SOAP_CMAC ns2__getFavoriteSpecialLineInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns2__getFavoriteSpecialLineInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getFavoriteSpecialLineInfResponse(): soap(NULL) { ns2__getFavoriteSpecialLineInfResponse::soap_default(NULL); }
	virtual ~ns2__getFavoriteSpecialLineInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__sendPhoneMessage
#define SOAP_TYPE_ns2__sendPhoneMessage (16)
/* ns2:sendPhoneMessage */
class SOAP_CMAC ns2__sendPhoneMessage
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *phone;	/* optional element of type xsd:string */
	std::string *msg;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns2__sendPhoneMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__sendPhoneMessage(): uid(NULL), phone(NULL), msg(NULL), soap(NULL) { ns2__sendPhoneMessage::soap_default(NULL); }
	virtual ~ns2__sendPhoneMessage() { }
};
#endif

#ifndef SOAP_TYPE_ns2__sendPhoneMessageResponse
#define SOAP_TYPE_ns2__sendPhoneMessageResponse (17)
/* ns2:sendPhoneMessageResponse */
class SOAP_CMAC ns2__sendPhoneMessageResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns2__sendPhoneMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__sendPhoneMessageResponse(): return_(NULL), soap(NULL) { ns2__sendPhoneMessageResponse::soap_default(NULL); }
	virtual ~ns2__sendPhoneMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getMyCarsInf
#define SOAP_TYPE_ns2__getMyCarsInf (18)
/* ns2:getMyCarsInf */
class SOAP_CMAC ns2__getMyCarsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns2__getMyCarsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getMyCarsInf(): uid(NULL), soap(NULL) { ns2__getMyCarsInf::soap_default(NULL); }
	virtual ~ns2__getMyCarsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getMyCarsInfResponse
#define SOAP_TYPE_ns2__getMyCarsInfResponse (19)
/* ns2:getMyCarsInfResponse */
class SOAP_CMAC ns2__getMyCarsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns2__getMyCarsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getMyCarsInfResponse(): soap(NULL) { ns2__getMyCarsInfResponse::soap_default(NULL); }
	virtual ~ns2__getMyCarsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSearchSpecialLineInf
#define SOAP_TYPE_ns2__getSearchSpecialLineInf (20)
/* ns2:getSearchSpecialLineInf */
class SOAP_CMAC ns2__getSearchSpecialLineInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns2__getSearchSpecialLineInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSearchSpecialLineInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getSearchSpecialLineInf::soap_default(NULL); }
	virtual ~ns2__getSearchSpecialLineInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSearchSpecialLineInfResponse
#define SOAP_TYPE_ns2__getSearchSpecialLineInfResponse (21)
/* ns2:getSearchSpecialLineInfResponse */
class SOAP_CMAC ns2__getSearchSpecialLineInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns2__getSearchSpecialLineInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSearchSpecialLineInfResponse(): soap(NULL) { ns2__getSearchSpecialLineInfResponse::soap_default(NULL); }
	virtual ~ns2__getSearchSpecialLineInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickServiceStationInf
#define SOAP_TYPE_ns2__getClickServiceStationInf (22)
/* ns2:getClickServiceStationInf */
class SOAP_CMAC ns2__getClickServiceStationInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns2__getClickServiceStationInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickServiceStationInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getClickServiceStationInf::soap_default(NULL); }
	virtual ~ns2__getClickServiceStationInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickServiceStationInfResponse
#define SOAP_TYPE_ns2__getClickServiceStationInfResponse (23)
/* ns2:getClickServiceStationInfResponse */
class SOAP_CMAC ns2__getClickServiceStationInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns2__getClickServiceStationInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickServiceStationInfResponse(): soap(NULL) { ns2__getClickServiceStationInfResponse::soap_default(NULL); }
	virtual ~ns2__getClickServiceStationInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getCustomCarsInf
#define SOAP_TYPE_ns2__getCustomCarsInf (24)
/* ns2:getCustomCarsInf */
class SOAP_CMAC ns2__getCustomCarsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int customid;	/* required element of type xsd:int */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns2__getCustomCarsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getCustomCarsInf(): uid(NULL), soap(NULL) { ns2__getCustomCarsInf::soap_default(NULL); }
	virtual ~ns2__getCustomCarsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getCustomCarsInfResponse
#define SOAP_TYPE_ns2__getCustomCarsInfResponse (25)
/* ns2:getCustomCarsInfResponse */
class SOAP_CMAC ns2__getCustomCarsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns2__getCustomCarsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getCustomCarsInfResponse(): soap(NULL) { ns2__getCustomCarsInfResponse::soap_default(NULL); }
	virtual ~ns2__getCustomCarsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delGoodsInf
#define SOAP_TYPE_ns2__delGoodsInf (26)
/* ns2:delGoodsInf */
class SOAP_CMAC ns2__delGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *recordID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns2__delGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delGoodsInf(): uid(NULL), recordID(NULL), soap(NULL) { ns2__delGoodsInf::soap_default(NULL); }
	virtual ~ns2__delGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delGoodsInfResponse
#define SOAP_TYPE_ns2__delGoodsInfResponse (27)
/* ns2:delGoodsInfResponse */
class SOAP_CMAC ns2__delGoodsInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns2__delGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delGoodsInfResponse(): return_(NULL), soap(NULL) { ns2__delGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__delGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSearchGoodsInf
#define SOAP_TYPE_ns2__getSearchGoodsInf (28)
/* ns2:getSearchGoodsInf */
class SOAP_CMAC ns2__getSearchGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns2__getSearchGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSearchGoodsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getSearchGoodsInf::soap_default(NULL); }
	virtual ~ns2__getSearchGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSearchGoodsInfResponse
#define SOAP_TYPE_ns2__getSearchGoodsInfResponse (29)
/* ns2:getSearchGoodsInfResponse */
class SOAP_CMAC ns2__getSearchGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns2__getSearchGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSearchGoodsInfResponse(): soap(NULL) { ns2__getSearchGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getSearchGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getMyGoodsInf
#define SOAP_TYPE_ns2__getMyGoodsInf (30)
/* ns2:getMyGoodsInf */
class SOAP_CMAC ns2__getMyGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns2__getMyGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getMyGoodsInf(): uid(NULL), soap(NULL) { ns2__getMyGoodsInf::soap_default(NULL); }
	virtual ~ns2__getMyGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getMyGoodsInfResponse
#define SOAP_TYPE_ns2__getMyGoodsInfResponse (31)
/* ns2:getMyGoodsInfResponse */
class SOAP_CMAC ns2__getMyGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns2__getMyGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getMyGoodsInfResponse(): soap(NULL) { ns2__getMyGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getMyGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSystemScrollAd
#define SOAP_TYPE_ns2__getSystemScrollAd (32)
/* ns2:getSystemScrollAd */
class SOAP_CMAC ns2__getSystemScrollAd
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *msgid;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns2__getSystemScrollAd */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSystemScrollAd(): uid(NULL), msgid(NULL), soap(NULL) { ns2__getSystemScrollAd::soap_default(NULL); }
	virtual ~ns2__getSystemScrollAd() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSystemScrollAdResponse
#define SOAP_TYPE_ns2__getSystemScrollAdResponse (33)
/* ns2:getSystemScrollAdResponse */
class SOAP_CMAC ns2__getSystemScrollAdResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns2__getSystemScrollAdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSystemScrollAdResponse(): return_(NULL), soap(NULL) { ns2__getSystemScrollAdResponse::soap_default(NULL); }
	virtual ~ns2__getSystemScrollAdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getAgentScrollAd
#define SOAP_TYPE_ns2__getAgentScrollAd (34)
/* ns2:getAgentScrollAd */
class SOAP_CMAC ns2__getAgentScrollAd
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *msgid;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ns2__getAgentScrollAd */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getAgentScrollAd(): uid(NULL), msgid(NULL), soap(NULL) { ns2__getAgentScrollAd::soap_default(NULL); }
	virtual ~ns2__getAgentScrollAd() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getAgentScrollAdResponse
#define SOAP_TYPE_ns2__getAgentScrollAdResponse (35)
/* ns2:getAgentScrollAdResponse */
class SOAP_CMAC ns2__getAgentScrollAdResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ns2__getAgentScrollAdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getAgentScrollAdResponse(): soap(NULL) { ns2__getAgentScrollAdResponse::soap_default(NULL); }
	virtual ~ns2__getAgentScrollAdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getCustomGoodsInf
#define SOAP_TYPE_ns2__getCustomGoodsInf (36)
/* ns2:getCustomGoodsInf */
class SOAP_CMAC ns2__getCustomGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int customid;	/* required element of type xsd:int */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ns2__getCustomGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getCustomGoodsInf(): uid(NULL), soap(NULL) { ns2__getCustomGoodsInf::soap_default(NULL); }
	virtual ~ns2__getCustomGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getCustomGoodsInfResponse
#define SOAP_TYPE_ns2__getCustomGoodsInfResponse (37)
/* ns2:getCustomGoodsInfResponse */
class SOAP_CMAC ns2__getCustomGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_ns2__getCustomGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getCustomGoodsInfResponse(): soap(NULL) { ns2__getCustomGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getCustomGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickSearchBulkGoodsInf
#define SOAP_TYPE_ns2__getClickSearchBulkGoodsInf (38)
/* ns2:getClickSearchBulkGoodsInf */
class SOAP_CMAC ns2__getClickSearchBulkGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_ns2__getClickSearchBulkGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickSearchBulkGoodsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getClickSearchBulkGoodsInf::soap_default(NULL); }
	virtual ~ns2__getClickSearchBulkGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickSearchBulkGoodsInfResponse
#define SOAP_TYPE_ns2__getClickSearchBulkGoodsInfResponse (39)
/* ns2:getClickSearchBulkGoodsInfResponse */
class SOAP_CMAC ns2__getClickSearchBulkGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_ns2__getClickSearchBulkGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickSearchBulkGoodsInfResponse(): soap(NULL) { ns2__getClickSearchBulkGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getClickSearchBulkGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setServiceStationInf
#define SOAP_TYPE_ns2__setServiceStationInf (40)
/* ns2:setServiceStationInf */
class SOAP_CMAC ns2__setServiceStationInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *sid;	/* optional element of type xsd:string */
	std::string *msg;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns2__setServiceStationInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setServiceStationInf(): uid(NULL), sid(NULL), msg(NULL), soap(NULL) { ns2__setServiceStationInf::soap_default(NULL); }
	virtual ~ns2__setServiceStationInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setServiceStationInfResponse
#define SOAP_TYPE_ns2__setServiceStationInfResponse (41)
/* ns2:setServiceStationInfResponse */
class SOAP_CMAC ns2__setServiceStationInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ns2__setServiceStationInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setServiceStationInfResponse(): return_(NULL), soap(NULL) { ns2__setServiceStationInfResponse::soap_default(NULL); }
	virtual ~ns2__setServiceStationInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__deleteUserCustomInf
#define SOAP_TYPE_ns2__deleteUserCustomInf (42)
/* ns2:deleteUserCustomInf */
class SOAP_CMAC ns2__deleteUserCustomInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_ns2__deleteUserCustomInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__deleteUserCustomInf(): uid(NULL), input(NULL), soap(NULL) { ns2__deleteUserCustomInf::soap_default(NULL); }
	virtual ~ns2__deleteUserCustomInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__deleteUserCustomInfResponse
#define SOAP_TYPE_ns2__deleteUserCustomInfResponse (43)
/* ns2:deleteUserCustomInfResponse */
class SOAP_CMAC ns2__deleteUserCustomInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_ns2__deleteUserCustomInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__deleteUserCustomInfResponse(): return_(NULL), soap(NULL) { ns2__deleteUserCustomInfResponse::soap_default(NULL); }
	virtual ~ns2__deleteUserCustomInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__checkChargeUser
#define SOAP_TYPE_ns2__checkChargeUser (44)
/* ns2:checkChargeUser */
class SOAP_CMAC ns2__checkChargeUser
{
public:
	std::string *loginname;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_ns2__checkChargeUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__checkChargeUser(): loginname(NULL), soap(NULL) { ns2__checkChargeUser::soap_default(NULL); }
	virtual ~ns2__checkChargeUser() { }
};
#endif

#ifndef SOAP_TYPE_ns2__checkChargeUserResponse
#define SOAP_TYPE_ns2__checkChargeUserResponse (45)
/* ns2:checkChargeUserResponse */
class SOAP_CMAC ns2__checkChargeUserResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ns2__checkChargeUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__checkChargeUserResponse(): return_(NULL), soap(NULL) { ns2__checkChargeUserResponse::soap_default(NULL); }
	virtual ~ns2__checkChargeUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickSearchSpecialLineInf
#define SOAP_TYPE_ns2__getClickSearchSpecialLineInf (46)
/* ns2:getClickSearchSpecialLineInf */
class SOAP_CMAC ns2__getClickSearchSpecialLineInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns2__getClickSearchSpecialLineInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickSearchSpecialLineInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getClickSearchSpecialLineInf::soap_default(NULL); }
	virtual ~ns2__getClickSearchSpecialLineInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickSearchSpecialLineInfResponse
#define SOAP_TYPE_ns2__getClickSearchSpecialLineInfResponse (47)
/* ns2:getClickSearchSpecialLineInfResponse */
class SOAP_CMAC ns2__getClickSearchSpecialLineInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ns2__getClickSearchSpecialLineInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickSearchSpecialLineInfResponse(): soap(NULL) { ns2__getClickSearchSpecialLineInfResponse::soap_default(NULL); }
	virtual ~ns2__getClickSearchSpecialLineInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getAllSpecialLineInf
#define SOAP_TYPE_ns2__getAllSpecialLineInf (48)
/* ns2:getAllSpecialLineInf */
class SOAP_CMAC ns2__getAllSpecialLineInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns2__getAllSpecialLineInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getAllSpecialLineInf(): uid(NULL), soap(NULL) { ns2__getAllSpecialLineInf::soap_default(NULL); }
	virtual ~ns2__getAllSpecialLineInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getAllSpecialLineInfResponse
#define SOAP_TYPE_ns2__getAllSpecialLineInfResponse (49)
/* ns2:getAllSpecialLineInfResponse */
class SOAP_CMAC ns2__getAllSpecialLineInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns2__getAllSpecialLineInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getAllSpecialLineInfResponse(): soap(NULL) { ns2__getAllSpecialLineInfResponse::soap_default(NULL); }
	virtual ~ns2__getAllSpecialLineInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delSpecialLineInf
#define SOAP_TYPE_ns2__delSpecialLineInf (50)
/* ns2:delSpecialLineInf */
class SOAP_CMAC ns2__delSpecialLineInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *recordID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns2__delSpecialLineInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delSpecialLineInf(): uid(NULL), recordID(NULL), soap(NULL) { ns2__delSpecialLineInf::soap_default(NULL); }
	virtual ~ns2__delSpecialLineInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delSpecialLineInfResponse
#define SOAP_TYPE_ns2__delSpecialLineInfResponse (51)
/* ns2:delSpecialLineInfResponse */
class SOAP_CMAC ns2__delSpecialLineInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns2__delSpecialLineInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delSpecialLineInfResponse(): return_(NULL), soap(NULL) { ns2__delSpecialLineInfResponse::soap_default(NULL); }
	virtual ~ns2__delSpecialLineInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getMyBulkGoodsInf
#define SOAP_TYPE_ns2__getMyBulkGoodsInf (52)
/* ns2:getMyBulkGoodsInf */
class SOAP_CMAC ns2__getMyBulkGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns2__getMyBulkGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getMyBulkGoodsInf(): uid(NULL), soap(NULL) { ns2__getMyBulkGoodsInf::soap_default(NULL); }
	virtual ~ns2__getMyBulkGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getMyBulkGoodsInfResponse
#define SOAP_TYPE_ns2__getMyBulkGoodsInfResponse (53)
/* ns2:getMyBulkGoodsInfResponse */
class SOAP_CMAC ns2__getMyBulkGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns2__getMyBulkGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getMyBulkGoodsInfResponse(): soap(NULL) { ns2__getMyBulkGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getMyBulkGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__addUserCustomInf
#define SOAP_TYPE_ns2__addUserCustomInf (54)
/* ns2:addUserCustomInf */
class SOAP_CMAC ns2__addUserCustomInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ns2__addUserCustomInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__addUserCustomInf(): uid(NULL), input(NULL), soap(NULL) { ns2__addUserCustomInf::soap_default(NULL); }
	virtual ~ns2__addUserCustomInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__addUserCustomInfResponse
#define SOAP_TYPE_ns2__addUserCustomInfResponse (55)
/* ns2:addUserCustomInfResponse */
class SOAP_CMAC ns2__addUserCustomInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ns2__addUserCustomInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__addUserCustomInfResponse(): return_(NULL), soap(NULL) { ns2__addUserCustomInfResponse::soap_default(NULL); }
	virtual ~ns2__addUserCustomInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setPubGoodsInf
#define SOAP_TYPE_ns2__setPubGoodsInf (56)
/* ns2:setPubGoodsInf */
class SOAP_CMAC ns2__setPubGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns2__setPubGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setPubGoodsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__setPubGoodsInf::soap_default(NULL); }
	virtual ~ns2__setPubGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setPubGoodsInfResponse
#define SOAP_TYPE_ns2__setPubGoodsInfResponse (57)
/* ns2:setPubGoodsInfResponse */
class SOAP_CMAC ns2__setPubGoodsInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns2__setPubGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setPubGoodsInfResponse(): return_(NULL), soap(NULL) { ns2__setPubGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__setPubGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickSearchGoodsInf
#define SOAP_TYPE_ns2__getClickSearchGoodsInf (58)
/* ns2:getClickSearchGoodsInf */
class SOAP_CMAC ns2__getClickSearchGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns2__getClickSearchGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickSearchGoodsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getClickSearchGoodsInf::soap_default(NULL); }
	virtual ~ns2__getClickSearchGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickSearchGoodsInfResponse
#define SOAP_TYPE_ns2__getClickSearchGoodsInfResponse (59)
/* ns2:getClickSearchGoodsInfResponse */
class SOAP_CMAC ns2__getClickSearchGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns2__getClickSearchGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickSearchGoodsInfResponse(): soap(NULL) { ns2__getClickSearchGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getClickSearchGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getNewCarsInf
#define SOAP_TYPE_ns2__getNewCarsInf (60)
/* ns2:getNewCarsInf */
class SOAP_CMAC ns2__getNewCarsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ns2__getNewCarsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getNewCarsInf(): uid(NULL), soap(NULL) { ns2__getNewCarsInf::soap_default(NULL); }
	virtual ~ns2__getNewCarsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getNewCarsInfResponse
#define SOAP_TYPE_ns2__getNewCarsInfResponse (61)
/* ns2:getNewCarsInfResponse */
class SOAP_CMAC ns2__getNewCarsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ns2__getNewCarsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getNewCarsInfResponse(): soap(NULL) { ns2__getNewCarsInfResponse::soap_default(NULL); }
	virtual ~ns2__getNewCarsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setPubBulkGoodsInf
#define SOAP_TYPE_ns2__setPubBulkGoodsInf (62)
/* ns2:setPubBulkGoodsInf */
class SOAP_CMAC ns2__setPubBulkGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns2__setPubBulkGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setPubBulkGoodsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__setPubBulkGoodsInf::soap_default(NULL); }
	virtual ~ns2__setPubBulkGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setPubBulkGoodsInfResponse
#define SOAP_TYPE_ns2__setPubBulkGoodsInfResponse (63)
/* ns2:setPubBulkGoodsInfResponse */
class SOAP_CMAC ns2__setPubBulkGoodsInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ns2__setPubBulkGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setPubBulkGoodsInfResponse(): return_(NULL), soap(NULL) { ns2__setPubBulkGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__setPubBulkGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSearchBulkGoodsInf
#define SOAP_TYPE_ns2__getSearchBulkGoodsInf (64)
/* ns2:getSearchBulkGoodsInf */
class SOAP_CMAC ns2__getSearchBulkGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns2__getSearchBulkGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSearchBulkGoodsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getSearchBulkGoodsInf::soap_default(NULL); }
	virtual ~ns2__getSearchBulkGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSearchBulkGoodsInfResponse
#define SOAP_TYPE_ns2__getSearchBulkGoodsInfResponse (65)
/* ns2:getSearchBulkGoodsInfResponse */
class SOAP_CMAC ns2__getSearchBulkGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns2__getSearchBulkGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSearchBulkGoodsInfResponse(): soap(NULL) { ns2__getSearchBulkGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getSearchBulkGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setPubCarsInf
#define SOAP_TYPE_ns2__setPubCarsInf (66)
/* ns2:setPubCarsInf */
class SOAP_CMAC ns2__setPubCarsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns2__setPubCarsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setPubCarsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__setPubCarsInf::soap_default(NULL); }
	virtual ~ns2__setPubCarsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setPubCarsInfResponse
#define SOAP_TYPE_ns2__setPubCarsInfResponse (67)
/* ns2:setPubCarsInfResponse */
class SOAP_CMAC ns2__setPubCarsInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ns2__setPubCarsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setPubCarsInfResponse(): return_(NULL), soap(NULL) { ns2__setPubCarsInfResponse::soap_default(NULL); }
	virtual ~ns2__setPubCarsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickSearchCarsInf
#define SOAP_TYPE_ns2__getClickSearchCarsInf (68)
/* ns2:getClickSearchCarsInf */
class SOAP_CMAC ns2__getClickSearchCarsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ns2__getClickSearchCarsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickSearchCarsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getClickSearchCarsInf::soap_default(NULL); }
	virtual ~ns2__getClickSearchCarsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getClickSearchCarsInfResponse
#define SOAP_TYPE_ns2__getClickSearchCarsInfResponse (69)
/* ns2:getClickSearchCarsInfResponse */
class SOAP_CMAC ns2__getClickSearchCarsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ns2__getClickSearchCarsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getClickSearchCarsInfResponse(): soap(NULL) { ns2__getClickSearchCarsInfResponse::soap_default(NULL); }
	virtual ~ns2__getClickSearchCarsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__placeOrder
#define SOAP_TYPE_ns2__placeOrder (70)
/* ns2:placeOrder */
class SOAP_CMAC ns2__placeOrder
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *infID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ns2__placeOrder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__placeOrder(): uid(NULL), infID(NULL), soap(NULL) { ns2__placeOrder::soap_default(NULL); }
	virtual ~ns2__placeOrder() { }
};
#endif

#ifndef SOAP_TYPE_ns2__placeOrderResponse
#define SOAP_TYPE_ns2__placeOrderResponse (71)
/* ns2:placeOrderResponse */
class SOAP_CMAC ns2__placeOrderResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ns2__placeOrderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__placeOrderResponse(): return_(NULL), soap(NULL) { ns2__placeOrderResponse::soap_default(NULL); }
	virtual ~ns2__placeOrderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__browseZoneCars
#define SOAP_TYPE_ns2__browseZoneCars (72)
/* ns2:browseZoneCars */
class SOAP_CMAC ns2__browseZoneCars
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_ns2__browseZoneCars */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__browseZoneCars(): uid(NULL), soap(NULL) { ns2__browseZoneCars::soap_default(NULL); }
	virtual ~ns2__browseZoneCars() { }
};
#endif

#ifndef SOAP_TYPE_ns2__browseZoneCarsResponse
#define SOAP_TYPE_ns2__browseZoneCarsResponse (73)
/* ns2:browseZoneCarsResponse */
class SOAP_CMAC ns2__browseZoneCarsResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ns2__browseZoneCarsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__browseZoneCarsResponse(): soap(NULL) { ns2__browseZoneCarsResponse::soap_default(NULL); }
	virtual ~ns2__browseZoneCarsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delBulkGoodsInf
#define SOAP_TYPE_ns2__delBulkGoodsInf (74)
/* ns2:delBulkGoodsInf */
class SOAP_CMAC ns2__delBulkGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *recordID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_ns2__delBulkGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delBulkGoodsInf(): uid(NULL), recordID(NULL), soap(NULL) { ns2__delBulkGoodsInf::soap_default(NULL); }
	virtual ~ns2__delBulkGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delBulkGoodsInfResponse
#define SOAP_TYPE_ns2__delBulkGoodsInfResponse (75)
/* ns2:delBulkGoodsInfResponse */
class SOAP_CMAC ns2__delBulkGoodsInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ns2__delBulkGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delBulkGoodsInfResponse(): return_(NULL), soap(NULL) { ns2__delBulkGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__delBulkGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__usrLogin
#define SOAP_TYPE_ns2__usrLogin (76)
/* ns2:usrLogin */
class SOAP_CMAC ns2__usrLogin
{
public:
	std::string *username;	/* optional element of type xsd:string */
	std::string *pwd;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_ns2__usrLogin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__usrLogin(): username(NULL), pwd(NULL), soap(NULL) { ns2__usrLogin::soap_default(NULL); }
	virtual ~ns2__usrLogin() { }
};
#endif

#ifndef SOAP_TYPE_ns2__usrLoginResponse
#define SOAP_TYPE_ns2__usrLoginResponse (77)
/* ns2:usrLoginResponse */
class SOAP_CMAC ns2__usrLoginResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns2__usrLoginResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__usrLoginResponse(): return_(NULL), soap(NULL) { ns2__usrLoginResponse::soap_default(NULL); }
	virtual ~ns2__usrLoginResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delCarsInf
#define SOAP_TYPE_ns2__delCarsInf (78)
/* ns2:delCarsInf */
class SOAP_CMAC ns2__delCarsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *recordID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ns2__delCarsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delCarsInf(): uid(NULL), recordID(NULL), soap(NULL) { ns2__delCarsInf::soap_default(NULL); }
	virtual ~ns2__delCarsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delCarsInfResponse
#define SOAP_TYPE_ns2__delCarsInfResponse (79)
/* ns2:delCarsInfResponse */
class SOAP_CMAC ns2__delCarsInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns2__delCarsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delCarsInfResponse(): return_(NULL), soap(NULL) { ns2__delCarsInfResponse::soap_default(NULL); }
	virtual ~ns2__delCarsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setPubSpecialLineInf
#define SOAP_TYPE_ns2__setPubSpecialLineInf (80)
/* ns2:setPubSpecialLineInf */
class SOAP_CMAC ns2__setPubSpecialLineInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_ns2__setPubSpecialLineInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setPubSpecialLineInf(): uid(NULL), input(NULL), soap(NULL) { ns2__setPubSpecialLineInf::soap_default(NULL); }
	virtual ~ns2__setPubSpecialLineInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__setPubSpecialLineInfResponse
#define SOAP_TYPE_ns2__setPubSpecialLineInfResponse (81)
/* ns2:setPubSpecialLineInfResponse */
class SOAP_CMAC ns2__setPubSpecialLineInfResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ns2__setPubSpecialLineInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__setPubSpecialLineInfResponse(): return_(NULL), soap(NULL) { ns2__setPubSpecialLineInfResponse::soap_default(NULL); }
	virtual ~ns2__setPubSpecialLineInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getMySpecialLineInf
#define SOAP_TYPE_ns2__getMySpecialLineInf (82)
/* ns2:getMySpecialLineInf */
class SOAP_CMAC ns2__getMySpecialLineInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_ns2__getMySpecialLineInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getMySpecialLineInf(): uid(NULL), soap(NULL) { ns2__getMySpecialLineInf::soap_default(NULL); }
	virtual ~ns2__getMySpecialLineInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getMySpecialLineInfResponse
#define SOAP_TYPE_ns2__getMySpecialLineInfResponse (83)
/* ns2:getMySpecialLineInfResponse */
class SOAP_CMAC ns2__getMySpecialLineInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ns2__getMySpecialLineInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getMySpecialLineInfResponse(): soap(NULL) { ns2__getMySpecialLineInfResponse::soap_default(NULL); }
	virtual ~ns2__getMySpecialLineInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getNewGoodsInf
#define SOAP_TYPE_ns2__getNewGoodsInf (84)
/* ns2:getNewGoodsInf */
class SOAP_CMAC ns2__getNewGoodsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_ns2__getNewGoodsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getNewGoodsInf(): uid(NULL), soap(NULL) { ns2__getNewGoodsInf::soap_default(NULL); }
	virtual ~ns2__getNewGoodsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getNewGoodsInfResponse
#define SOAP_TYPE_ns2__getNewGoodsInfResponse (85)
/* ns2:getNewGoodsInfResponse */
class SOAP_CMAC ns2__getNewGoodsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_ns2__getNewGoodsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getNewGoodsInfResponse(): soap(NULL) { ns2__getNewGoodsInfResponse::soap_default(NULL); }
	virtual ~ns2__getNewGoodsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delFavoriteSpecialLine
#define SOAP_TYPE_ns2__delFavoriteSpecialLine (86)
/* ns2:delFavoriteSpecialLine */
class SOAP_CMAC ns2__delFavoriteSpecialLine
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *recordID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_ns2__delFavoriteSpecialLine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delFavoriteSpecialLine(): uid(NULL), recordID(NULL), soap(NULL) { ns2__delFavoriteSpecialLine::soap_default(NULL); }
	virtual ~ns2__delFavoriteSpecialLine() { }
};
#endif

#ifndef SOAP_TYPE_ns2__delFavoriteSpecialLineResponse
#define SOAP_TYPE_ns2__delFavoriteSpecialLineResponse (87)
/* ns2:delFavoriteSpecialLineResponse */
class SOAP_CMAC ns2__delFavoriteSpecialLineResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_ns2__delFavoriteSpecialLineResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__delFavoriteSpecialLineResponse(): return_(NULL), soap(NULL) { ns2__delFavoriteSpecialLineResponse::soap_default(NULL); }
	virtual ~ns2__delFavoriteSpecialLineResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getAgentPopAd
#define SOAP_TYPE_ns2__getAgentPopAd (88)
/* ns2:getAgentPopAd */
class SOAP_CMAC ns2__getAgentPopAd
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *msgid;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_ns2__getAgentPopAd */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getAgentPopAd(): uid(NULL), msgid(NULL), soap(NULL) { ns2__getAgentPopAd::soap_default(NULL); }
	virtual ~ns2__getAgentPopAd() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getAgentPopAdResponse
#define SOAP_TYPE_ns2__getAgentPopAdResponse (89)
/* ns2:getAgentPopAdResponse */
class SOAP_CMAC ns2__getAgentPopAdResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_ns2__getAgentPopAdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getAgentPopAdResponse(): return_(NULL), soap(NULL) { ns2__getAgentPopAdResponse::soap_default(NULL); }
	virtual ~ns2__getAgentPopAdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSearchCarsInf
#define SOAP_TYPE_ns2__getSearchCarsInf (90)
/* ns2:getSearchCarsInf */
class SOAP_CMAC ns2__getSearchCarsInf
{
public:
	std::string *uid;	/* optional element of type xsd:string */
	std::string *input;	/* optional element of type xsd:string */
	int record;	/* required element of type xsd:int */
	int curpage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_ns2__getSearchCarsInf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSearchCarsInf(): uid(NULL), input(NULL), soap(NULL) { ns2__getSearchCarsInf::soap_default(NULL); }
	virtual ~ns2__getSearchCarsInf() { }
};
#endif

#ifndef SOAP_TYPE_ns2__getSearchCarsInfResponse
#define SOAP_TYPE_ns2__getSearchCarsInfResponse (91)
/* ns2:getSearchCarsInfResponse */
class SOAP_CMAC ns2__getSearchCarsInfResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_ns2__getSearchCarsInfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__getSearchCarsInfResponse(): soap(NULL) { ns2__getSearchCarsInfResponse::soap_default(NULL); }
	virtual ~ns2__getSearchCarsInfResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__getNewBulkGoodsInf
#define SOAP_TYPE___ns1__getNewBulkGoodsInf (99)
/* Operation wrapper: */
struct __ns1__getNewBulkGoodsInf
{
public:
	ns2__getNewBulkGoodsInf *ns2__getNewBulkGoodsInf_;	/* optional element of type ns2:getNewBulkGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__collectSpecialLine
#define SOAP_TYPE___ns1__collectSpecialLine (103)
/* Operation wrapper: */
struct __ns1__collectSpecialLine
{
public:
	ns2__collectSpecialLine *ns2__collectSpecialLine_;	/* optional element of type ns2:collectSpecialLine */
};
#endif

#ifndef SOAP_TYPE___ns1__getFavoriteSpecialLineInf
#define SOAP_TYPE___ns1__getFavoriteSpecialLineInf (107)
/* Operation wrapper: */
struct __ns1__getFavoriteSpecialLineInf
{
public:
	ns2__getFavoriteSpecialLineInf *ns2__getFavoriteSpecialLineInf_;	/* optional element of type ns2:getFavoriteSpecialLineInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getUserCustomInf
#define SOAP_TYPE___ns1__getUserCustomInf (111)
/* Operation wrapper: */
struct __ns1__getUserCustomInf
{
public:
	ns2__getUserCustomInf *ns2__getUserCustomInf_;	/* optional element of type ns2:getUserCustomInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getMyCarsInf
#define SOAP_TYPE___ns1__getMyCarsInf (115)
/* Operation wrapper: */
struct __ns1__getMyCarsInf
{
public:
	ns2__getMyCarsInf *ns2__getMyCarsInf_;	/* optional element of type ns2:getMyCarsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__sendPhoneMessage
#define SOAP_TYPE___ns1__sendPhoneMessage (119)
/* Operation wrapper: */
struct __ns1__sendPhoneMessage
{
public:
	ns2__sendPhoneMessage *ns2__sendPhoneMessage_;	/* optional element of type ns2:sendPhoneMessage */
};
#endif

#ifndef SOAP_TYPE___ns1__getClickServiceStationInf
#define SOAP_TYPE___ns1__getClickServiceStationInf (123)
/* Operation wrapper: */
struct __ns1__getClickServiceStationInf
{
public:
	ns2__getClickServiceStationInf *ns2__getClickServiceStationInf_;	/* optional element of type ns2:getClickServiceStationInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getSearchSpecialLineInf
#define SOAP_TYPE___ns1__getSearchSpecialLineInf (127)
/* Operation wrapper: */
struct __ns1__getSearchSpecialLineInf
{
public:
	ns2__getSearchSpecialLineInf *ns2__getSearchSpecialLineInf_;	/* optional element of type ns2:getSearchSpecialLineInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getCustomCarsInf
#define SOAP_TYPE___ns1__getCustomCarsInf (131)
/* Operation wrapper: */
struct __ns1__getCustomCarsInf
{
public:
	ns2__getCustomCarsInf *ns2__getCustomCarsInf_;	/* optional element of type ns2:getCustomCarsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__delGoodsInf
#define SOAP_TYPE___ns1__delGoodsInf (135)
/* Operation wrapper: */
struct __ns1__delGoodsInf
{
public:
	ns2__delGoodsInf *ns2__delGoodsInf_;	/* optional element of type ns2:delGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getSearchGoodsInf
#define SOAP_TYPE___ns1__getSearchGoodsInf (139)
/* Operation wrapper: */
struct __ns1__getSearchGoodsInf
{
public:
	ns2__getSearchGoodsInf *ns2__getSearchGoodsInf_;	/* optional element of type ns2:getSearchGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getMyGoodsInf
#define SOAP_TYPE___ns1__getMyGoodsInf (143)
/* Operation wrapper: */
struct __ns1__getMyGoodsInf
{
public:
	ns2__getMyGoodsInf *ns2__getMyGoodsInf_;	/* optional element of type ns2:getMyGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getSystemScrollAd
#define SOAP_TYPE___ns1__getSystemScrollAd (147)
/* Operation wrapper: */
struct __ns1__getSystemScrollAd
{
public:
	ns2__getSystemScrollAd *ns2__getSystemScrollAd_;	/* optional element of type ns2:getSystemScrollAd */
};
#endif

#ifndef SOAP_TYPE___ns1__getAgentScrollAd
#define SOAP_TYPE___ns1__getAgentScrollAd (151)
/* Operation wrapper: */
struct __ns1__getAgentScrollAd
{
public:
	ns2__getAgentScrollAd *ns2__getAgentScrollAd_;	/* optional element of type ns2:getAgentScrollAd */
};
#endif

#ifndef SOAP_TYPE___ns1__getCustomGoodsInf
#define SOAP_TYPE___ns1__getCustomGoodsInf (155)
/* Operation wrapper: */
struct __ns1__getCustomGoodsInf
{
public:
	ns2__getCustomGoodsInf *ns2__getCustomGoodsInf_;	/* optional element of type ns2:getCustomGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getClickSearchBulkGoodsInf
#define SOAP_TYPE___ns1__getClickSearchBulkGoodsInf (159)
/* Operation wrapper: */
struct __ns1__getClickSearchBulkGoodsInf
{
public:
	ns2__getClickSearchBulkGoodsInf *ns2__getClickSearchBulkGoodsInf_;	/* optional element of type ns2:getClickSearchBulkGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__checkChargeUser
#define SOAP_TYPE___ns1__checkChargeUser (163)
/* Operation wrapper: */
struct __ns1__checkChargeUser
{
public:
	ns2__checkChargeUser *ns2__checkChargeUser_;	/* optional element of type ns2:checkChargeUser */
};
#endif

#ifndef SOAP_TYPE___ns1__deleteUserCustomInf
#define SOAP_TYPE___ns1__deleteUserCustomInf (167)
/* Operation wrapper: */
struct __ns1__deleteUserCustomInf
{
public:
	ns2__deleteUserCustomInf *ns2__deleteUserCustomInf_;	/* optional element of type ns2:deleteUserCustomInf */
};
#endif

#ifndef SOAP_TYPE___ns1__setServiceStationInf
#define SOAP_TYPE___ns1__setServiceStationInf (171)
/* Operation wrapper: */
struct __ns1__setServiceStationInf
{
public:
	ns2__setServiceStationInf *ns2__setServiceStationInf_;	/* optional element of type ns2:setServiceStationInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getAllSpecialLineInf
#define SOAP_TYPE___ns1__getAllSpecialLineInf (175)
/* Operation wrapper: */
struct __ns1__getAllSpecialLineInf
{
public:
	ns2__getAllSpecialLineInf *ns2__getAllSpecialLineInf_;	/* optional element of type ns2:getAllSpecialLineInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getClickSearchSpecialLineInf
#define SOAP_TYPE___ns1__getClickSearchSpecialLineInf (179)
/* Operation wrapper: */
struct __ns1__getClickSearchSpecialLineInf
{
public:
	ns2__getClickSearchSpecialLineInf *ns2__getClickSearchSpecialLineInf_;	/* optional element of type ns2:getClickSearchSpecialLineInf */
};
#endif

#ifndef SOAP_TYPE___ns1__delSpecialLineInf
#define SOAP_TYPE___ns1__delSpecialLineInf (183)
/* Operation wrapper: */
struct __ns1__delSpecialLineInf
{
public:
	ns2__delSpecialLineInf *ns2__delSpecialLineInf_;	/* optional element of type ns2:delSpecialLineInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getMyBulkGoodsInf
#define SOAP_TYPE___ns1__getMyBulkGoodsInf (187)
/* Operation wrapper: */
struct __ns1__getMyBulkGoodsInf
{
public:
	ns2__getMyBulkGoodsInf *ns2__getMyBulkGoodsInf_;	/* optional element of type ns2:getMyBulkGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__addUserCustomInf
#define SOAP_TYPE___ns1__addUserCustomInf (191)
/* Operation wrapper: */
struct __ns1__addUserCustomInf
{
public:
	ns2__addUserCustomInf *ns2__addUserCustomInf_;	/* optional element of type ns2:addUserCustomInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getClickSearchGoodsInf
#define SOAP_TYPE___ns1__getClickSearchGoodsInf (195)
/* Operation wrapper: */
struct __ns1__getClickSearchGoodsInf
{
public:
	ns2__getClickSearchGoodsInf *ns2__getClickSearchGoodsInf_;	/* optional element of type ns2:getClickSearchGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__setPubGoodsInf
#define SOAP_TYPE___ns1__setPubGoodsInf (199)
/* Operation wrapper: */
struct __ns1__setPubGoodsInf
{
public:
	ns2__setPubGoodsInf *ns2__setPubGoodsInf_;	/* optional element of type ns2:setPubGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getNewCarsInf
#define SOAP_TYPE___ns1__getNewCarsInf (203)
/* Operation wrapper: */
struct __ns1__getNewCarsInf
{
public:
	ns2__getNewCarsInf *ns2__getNewCarsInf_;	/* optional element of type ns2:getNewCarsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getSearchBulkGoodsInf
#define SOAP_TYPE___ns1__getSearchBulkGoodsInf (207)
/* Operation wrapper: */
struct __ns1__getSearchBulkGoodsInf
{
public:
	ns2__getSearchBulkGoodsInf *ns2__getSearchBulkGoodsInf_;	/* optional element of type ns2:getSearchBulkGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__setPubBulkGoodsInf
#define SOAP_TYPE___ns1__setPubBulkGoodsInf (211)
/* Operation wrapper: */
struct __ns1__setPubBulkGoodsInf
{
public:
	ns2__setPubBulkGoodsInf *ns2__setPubBulkGoodsInf_;	/* optional element of type ns2:setPubBulkGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__setPubCarsInf
#define SOAP_TYPE___ns1__setPubCarsInf (215)
/* Operation wrapper: */
struct __ns1__setPubCarsInf
{
public:
	ns2__setPubCarsInf *ns2__setPubCarsInf_;	/* optional element of type ns2:setPubCarsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getClickSearchCarsInf
#define SOAP_TYPE___ns1__getClickSearchCarsInf (219)
/* Operation wrapper: */
struct __ns1__getClickSearchCarsInf
{
public:
	ns2__getClickSearchCarsInf *ns2__getClickSearchCarsInf_;	/* optional element of type ns2:getClickSearchCarsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__browseZoneCars
#define SOAP_TYPE___ns1__browseZoneCars (223)
/* Operation wrapper: */
struct __ns1__browseZoneCars
{
public:
	ns2__browseZoneCars *ns2__browseZoneCars_;	/* optional element of type ns2:browseZoneCars */
};
#endif

#ifndef SOAP_TYPE___ns1__placeOrder
#define SOAP_TYPE___ns1__placeOrder (227)
/* Operation wrapper: */
struct __ns1__placeOrder
{
public:
	ns2__placeOrder *ns2__placeOrder_;	/* optional element of type ns2:placeOrder */
};
#endif

#ifndef SOAP_TYPE___ns1__delBulkGoodsInf
#define SOAP_TYPE___ns1__delBulkGoodsInf (231)
/* Operation wrapper: */
struct __ns1__delBulkGoodsInf
{
public:
	ns2__delBulkGoodsInf *ns2__delBulkGoodsInf_;	/* optional element of type ns2:delBulkGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__usrLogin
#define SOAP_TYPE___ns1__usrLogin (235)
/* Operation wrapper: */
struct __ns1__usrLogin
{
public:
	ns2__usrLogin *ns2__usrLogin_;	/* optional element of type ns2:usrLogin */
};
#endif

#ifndef SOAP_TYPE___ns1__delCarsInf
#define SOAP_TYPE___ns1__delCarsInf (239)
/* Operation wrapper: */
struct __ns1__delCarsInf
{
public:
	ns2__delCarsInf *ns2__delCarsInf_;	/* optional element of type ns2:delCarsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getMySpecialLineInf
#define SOAP_TYPE___ns1__getMySpecialLineInf (243)
/* Operation wrapper: */
struct __ns1__getMySpecialLineInf
{
public:
	ns2__getMySpecialLineInf *ns2__getMySpecialLineInf_;	/* optional element of type ns2:getMySpecialLineInf */
};
#endif

#ifndef SOAP_TYPE___ns1__setPubSpecialLineInf
#define SOAP_TYPE___ns1__setPubSpecialLineInf (247)
/* Operation wrapper: */
struct __ns1__setPubSpecialLineInf
{
public:
	ns2__setPubSpecialLineInf *ns2__setPubSpecialLineInf_;	/* optional element of type ns2:setPubSpecialLineInf */
};
#endif

#ifndef SOAP_TYPE___ns1__getNewGoodsInf
#define SOAP_TYPE___ns1__getNewGoodsInf (251)
/* Operation wrapper: */
struct __ns1__getNewGoodsInf
{
public:
	ns2__getNewGoodsInf *ns2__getNewGoodsInf_;	/* optional element of type ns2:getNewGoodsInf */
};
#endif

#ifndef SOAP_TYPE___ns1__delFavoriteSpecialLine
#define SOAP_TYPE___ns1__delFavoriteSpecialLine (255)
/* Operation wrapper: */
struct __ns1__delFavoriteSpecialLine
{
public:
	ns2__delFavoriteSpecialLine *ns2__delFavoriteSpecialLine_;	/* optional element of type ns2:delFavoriteSpecialLine */
};
#endif

#ifndef SOAP_TYPE___ns1__getAgentPopAd
#define SOAP_TYPE___ns1__getAgentPopAd (259)
/* Operation wrapper: */
struct __ns1__getAgentPopAd
{
public:
	ns2__getAgentPopAd *ns2__getAgentPopAd_;	/* optional element of type ns2:getAgentPopAd */
};
#endif

#ifndef SOAP_TYPE___ns1__getSearchCarsInf
#define SOAP_TYPE___ns1__getSearchCarsInf (263)
/* Operation wrapper: */
struct __ns1__getSearchCarsInf
{
public:
	ns2__getSearchCarsInf *ns2__getSearchCarsInf_;	/* optional element of type ns2:getSearchCarsInf */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (264)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (265)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (267)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (270)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (271)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getNewBulkGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getNewBulkGoodsInf *ns2__getNewBulkGoodsInf_, ns2__getNewBulkGoodsInfResponse *ns2__getNewBulkGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__collectSpecialLine(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__collectSpecialLine *ns2__collectSpecialLine_, ns2__collectSpecialLineResponse *ns2__collectSpecialLineResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getFavoriteSpecialLineInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getFavoriteSpecialLineInf *ns2__getFavoriteSpecialLineInf_, ns2__getFavoriteSpecialLineInfResponse *ns2__getFavoriteSpecialLineInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getUserCustomInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getUserCustomInf *ns2__getUserCustomInf_, ns2__getUserCustomInfResponse *ns2__getUserCustomInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMyCarsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getMyCarsInf *ns2__getMyCarsInf_, ns2__getMyCarsInfResponse *ns2__getMyCarsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sendPhoneMessage(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__sendPhoneMessage *ns2__sendPhoneMessage_, ns2__sendPhoneMessageResponse *ns2__sendPhoneMessageResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getClickServiceStationInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getClickServiceStationInf *ns2__getClickServiceStationInf_, ns2__getClickServiceStationInfResponse *ns2__getClickServiceStationInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSearchSpecialLineInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getSearchSpecialLineInf *ns2__getSearchSpecialLineInf_, ns2__getSearchSpecialLineInfResponse *ns2__getSearchSpecialLineInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getCustomCarsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getCustomCarsInf *ns2__getCustomCarsInf_, ns2__getCustomCarsInfResponse *ns2__getCustomCarsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__delGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__delGoodsInf *ns2__delGoodsInf_, ns2__delGoodsInfResponse *ns2__delGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSearchGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getSearchGoodsInf *ns2__getSearchGoodsInf_, ns2__getSearchGoodsInfResponse *ns2__getSearchGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMyGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getMyGoodsInf *ns2__getMyGoodsInf_, ns2__getMyGoodsInfResponse *ns2__getMyGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSystemScrollAd(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getSystemScrollAd *ns2__getSystemScrollAd_, ns2__getSystemScrollAdResponse *ns2__getSystemScrollAdResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAgentScrollAd(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getAgentScrollAd *ns2__getAgentScrollAd_, ns2__getAgentScrollAdResponse *ns2__getAgentScrollAdResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getCustomGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getCustomGoodsInf *ns2__getCustomGoodsInf_, ns2__getCustomGoodsInfResponse *ns2__getCustomGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getClickSearchBulkGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getClickSearchBulkGoodsInf *ns2__getClickSearchBulkGoodsInf_, ns2__getClickSearchBulkGoodsInfResponse *ns2__getClickSearchBulkGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkChargeUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__checkChargeUser *ns2__checkChargeUser_, ns2__checkChargeUserResponse *ns2__checkChargeUserResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteUserCustomInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__deleteUserCustomInf *ns2__deleteUserCustomInf_, ns2__deleteUserCustomInfResponse *ns2__deleteUserCustomInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setServiceStationInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__setServiceStationInf *ns2__setServiceStationInf_, ns2__setServiceStationInfResponse *ns2__setServiceStationInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAllSpecialLineInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getAllSpecialLineInf *ns2__getAllSpecialLineInf_, ns2__getAllSpecialLineInfResponse *ns2__getAllSpecialLineInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getClickSearchSpecialLineInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getClickSearchSpecialLineInf *ns2__getClickSearchSpecialLineInf_, ns2__getClickSearchSpecialLineInfResponse *ns2__getClickSearchSpecialLineInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__delSpecialLineInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__delSpecialLineInf *ns2__delSpecialLineInf_, ns2__delSpecialLineInfResponse *ns2__delSpecialLineInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMyBulkGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getMyBulkGoodsInf *ns2__getMyBulkGoodsInf_, ns2__getMyBulkGoodsInfResponse *ns2__getMyBulkGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__addUserCustomInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__addUserCustomInf *ns2__addUserCustomInf_, ns2__addUserCustomInfResponse *ns2__addUserCustomInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getClickSearchGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getClickSearchGoodsInf *ns2__getClickSearchGoodsInf_, ns2__getClickSearchGoodsInfResponse *ns2__getClickSearchGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setPubGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__setPubGoodsInf *ns2__setPubGoodsInf_, ns2__setPubGoodsInfResponse *ns2__setPubGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getNewCarsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getNewCarsInf *ns2__getNewCarsInf_, ns2__getNewCarsInfResponse *ns2__getNewCarsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSearchBulkGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getSearchBulkGoodsInf *ns2__getSearchBulkGoodsInf_, ns2__getSearchBulkGoodsInfResponse *ns2__getSearchBulkGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setPubBulkGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__setPubBulkGoodsInf *ns2__setPubBulkGoodsInf_, ns2__setPubBulkGoodsInfResponse *ns2__setPubBulkGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setPubCarsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__setPubCarsInf *ns2__setPubCarsInf_, ns2__setPubCarsInfResponse *ns2__setPubCarsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getClickSearchCarsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getClickSearchCarsInf *ns2__getClickSearchCarsInf_, ns2__getClickSearchCarsInfResponse *ns2__getClickSearchCarsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__browseZoneCars(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__browseZoneCars *ns2__browseZoneCars_, ns2__browseZoneCarsResponse *ns2__browseZoneCarsResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__placeOrder(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__placeOrder *ns2__placeOrder_, ns2__placeOrderResponse *ns2__placeOrderResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__delBulkGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__delBulkGoodsInf *ns2__delBulkGoodsInf_, ns2__delBulkGoodsInfResponse *ns2__delBulkGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__usrLogin(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__usrLogin *ns2__usrLogin_, ns2__usrLoginResponse *ns2__usrLoginResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__delCarsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__delCarsInf *ns2__delCarsInf_, ns2__delCarsInfResponse *ns2__delCarsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMySpecialLineInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getMySpecialLineInf *ns2__getMySpecialLineInf_, ns2__getMySpecialLineInfResponse *ns2__getMySpecialLineInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setPubSpecialLineInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__setPubSpecialLineInf *ns2__setPubSpecialLineInf_, ns2__setPubSpecialLineInfResponse *ns2__setPubSpecialLineInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getNewGoodsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getNewGoodsInf *ns2__getNewGoodsInf_, ns2__getNewGoodsInfResponse *ns2__getNewGoodsInfResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__delFavoriteSpecialLine(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__delFavoriteSpecialLine *ns2__delFavoriteSpecialLine_, ns2__delFavoriteSpecialLineResponse *ns2__delFavoriteSpecialLineResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAgentPopAd(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getAgentPopAd *ns2__getAgentPopAd_, ns2__getAgentPopAdResponse *ns2__getAgentPopAdResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSearchCarsInf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__getSearchCarsInf *ns2__getSearchCarsInf_, ns2__getSearchCarsInfResponse *ns2__getSearchCarsInfResponse_);

#endif

/* End of soapStub.h */
